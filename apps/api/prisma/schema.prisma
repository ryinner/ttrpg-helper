// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Systems Tables

model Language {
  id   Int    @id @default(autoincrement())
  code String @db.VarChar(2)

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("languages")
}

// App tables

model TTRPG {
  id          Int       @id @default(autoincrement())
  isPublished Boolean   @default(true)
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  translates TTRPGTranslate[]

  @@map("table_top_role_playing_games")
}

model TTRPGTranslate {
  id         Int       @id @default(autoincrement())
  languageId Int       @map("language_id")
  ttrpgId    Int       @map("table_top_role_playing_game_id")
  name       String
  nameShort  String    @map("name_short")
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  ttrpg TTRPG @relation(fields: [ttrpgId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@unique([languageId, ttrpgId])
  @@map("table_top_role_playing_games_translates")
}

model Tag {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  translates TagTrasnlate[]

  @@map("tags")
}

model TagTrasnlate {
  id         Int       @id @default(autoincrement())
  languageId Int       @map("language_id")
  tagId      Int       @map("tag_id")
  name       String
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  tag Tag @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([languageId, tagId])
  @@map("tags_translates")
}

model CardsCollection {
  id          Int       @id @default(autoincrement())
  isPublished Boolean   @default(true)
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  translates          CardsCollectionTrasnlate[]
  CardCardsCollection CardCardsCollection[]

  @@map("cards_collections")
}

model CardsCollectionTrasnlate {
  id               Int       @id @default(autoincrement())
  languageId       Int       @map("language_id")
  cardCollectionId Int       @map("card_collection_id")
  name             String
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  cardCollections CardsCollection @relation(fields: [cardCollectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([languageId, cardCollectionId])
  @@map("cards_collections_translates")
}

model Card {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  translates          CardTranslate[]
  CardCardsCollection CardCardsCollection[]

  @@map("cards")
}

model CardTranslate {
  id          Int       @id @default(autoincrement())
  languageId  Int       @map("language_id")
  cardId      Int       @map("card_id")
  name        String
  description String    @db.Text
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)
  Card        Card      @relation(fields: [cardId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("cards_translates")
}

model CardCardsCollection {
  id               Int       @id @default(autoincrement())
  cardId           Int
  cardCollectionId Int
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  card       Card            @relation(fields: [cardId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  collection CardsCollection @relation(fields: [cardCollectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("cards_cards_collections")
}
